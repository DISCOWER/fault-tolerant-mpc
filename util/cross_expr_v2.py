code = """r^2*m^4*q__u2^2*`e__&omega;1`^4 
+ (m^4*q__u1^2*r^4 + 2*j__00*j__22*m^2*q__u1*q__u6*r^2 - 2*j__11*j__22*m^2*q__u1*q__u6*r^2 + m^4*q__u1^2*r^2 + j__00^2*j__22^2*q__u6^2 - 2*j__00*j__11*j__22^2*q__u6^2 + j__11^2*j__22^2*q__u6^2)*`e__&omega;1`^2*`e__&omega;2`^2 
+ (2*m^4*q__u2^2*r^2 + j__00^2*j__11^2*q__u5^2 - 2*j__00*j__11^2*j__22*q__u5^2 + j__11^2*j__22^2*q__u5^2)*`e__&omega;1`^2*`e__&omega;3`^2 
+ (4*m^4*q__u2^2*r^2*omega__d + 2*j__00^2*j__11^2*q__u5^2*omega__d - 4*j__00*j__11^2*j__22*q__u5^2*omega__d + 2*j__11^2*j__22^2*q__u5^2*omega__d)*`e__&omega;1`^2*`e__&omega;3` 
+ (k__1^2*m^4*q__u3^2*r^4 + 2*j__00^2*k__1^2*m^2*q__u3*q__u4*r^2 + k__1^2*m^4*q__u3^2*r^2 + j__00^4*k__1^2*q__u4^2 + j__00^2*j__11^2*q__u5^2*omega__d^2 - 2*j__00*j__11^2*j__22*q__u5^2*omega__d^2 + j__11^2*j__22^2*q__u5^2*omega__d^2)*`e__&omega;1`^2 
+ (-2*k__1*m^4*q__u3^2*r^4 + 2*k__3*m^4*q__u1^2*r^4 - 2*j__00^2*k__1*m^2*q__u3*q__u4*r^2 + 2*j__00*j__11*k__1*m^2*q__u3*q__u4*r^2 - 2*j__00*j__22*k__1*m^2*q__u3*q__u4*r^2 + 2*j__00*j__22*k__3*m^2*q__u1*q__u6*r^2 - 2*j__11*j__22*k__3*m^2*q__u1*q__u6*r^2 + 2*j__22^2*k__3*m^2*q__u1*q__u6*r^2 - 2*k__1*m^4*q__u3^2*r^2 + 2*k__3*m^4*q__u1^2*r^2 + 2*j__00^3*j__11*k__1*q__u4^2 - 2*j__00^3*j__22*k__1*q__u4^2 - 2*j__00*j__11^3*k__2*q__u5^2 + 2*j__00*j__22^3*k__3*q__u6^2 + 2*j__11^3*j__22*k__2*q__u5^2 - 2*j__11*j__22^3*k__3*q__u6^2)*`e__&omega;1`*`e__&omega;2`*`e__&omega;3` 
+ (-2*k__1*m^4*q__u3^2*r^4*omega__d - 2*j__00^2*k__1*m^2*q__u3*q__u4*r^2*omega__d + 2*j__00*j__11*k__1*m^2*q__u3*q__u4*r^2*omega__d - 2*j__00*j__22*k__1*m^2*q__u3*q__u4*r^2*omega__d - 2*k__1*m^4*q__u3^2*r^2*omega__d + 2*j__00^3*j__11*k__1*q__u4^2*omega__d - 2*j__00^3*j__22*k__1*q__u4^2*omega__d - 2*j__00*j__11^3*k__2*q__u5^2*omega__d + 2*j__11^3*j__22*k__2*q__u5^2*omega__d)*`e__&omega;1`*`e__&omega;2` 
+ (m^4*q__u3^2*r^4 - 2*j__00*j__11*m^2*q__u3*q__u4*r^2 + 2*j__00*j__22*m^2*q__u3*q__u4*r^2 + m^4*q__u3^2*r^2 + j__00^2*j__11^2*q__u4^2 - 2*j__00^2*j__11*j__22*q__u4^2 + j__00^2*j__22^2*q__u4^2)*`e__&omega;2`^2*`e__&omega;3`^2 
+ (2*m^4*q__u3^2*r^4*omega__d - 4*j__00*j__11*m^2*q__u3*q__u4*r^2*omega__d + 4*j__00*j__22*m^2*q__u3*q__u4*r^2*omega__d + 2*m^4*q__u3^2*r^2*omega__d + 2*j__00^2*j__11^2*q__u4^2*omega__d - 4*j__00^2*j__11*j__22*q__u4^2*omega__d + 2*j__00^2*j__22^2*q__u4^2*omega__d)*`e__&omega;2`^2*`e__&omega;3` 
+ (m^4*q__u3^2*r^4*omega__d^2 - 2*j__00*j__11*m^2*q__u3*q__u4*r^2*omega__d^2 + 2*j__00*j__22*m^2*q__u3*q__u4*r^2*omega__d^2 + m^4*q__u3^2*r^2*omega__d^2 + j__00^2*j__11^2*q__u4^2*omega__d^2 - 2*j__00^2*j__11*j__22*q__u4^2*omega__d^2 + j__00^2*j__22^2*q__u4^2*omega__d^2 + j__11^4*k__2^2*q__u5^2)*`e__&omega;2`^2 
+ r^2*m^4*q__u2^2*`e__&omega;3`^4 
+ 4*m^4*q__u2^2*r^2*omega__d*`e__&omega;3`^3 
+ (k__3^2*m^4*q__u1^2*r^4 + 2*j__22^2*k__3^2*m^2*q__u1*q__u6*r^2 + k__3^2*m^4*q__u1^2*r^2 + 4*m^4*q__u2^2*r^2*omega__d^2 + j__22^4*k__3^2*q__u6^2)*`e__&omega;3`^2"""

subs1 = {
    "j__00" : "j00",
    "j__11" : "j11",
    "j__22" : "j22",
    "k__1" : "k1",
    "k__2" : "k2",
    "k__3" : "k3",
    "omega__d" : "omd",
    "r" : "rNorm",
    "sqrNormt" : "sqrt",
    "q__u1" : "qu1",
    "q__u2" : "qu2",
    "q__u3" : "qu3",
    "q__u4" : "qu4",
    "q__u5" : "qu5",
    "q__u6" : "qu6",
    "`e__&omega;1`" : "eo1",
    "`e__&omega;2`" : "eo2",
    "`e__&omega;3`" : "eo3",
    "^" : "**"
}

for k in subs1.keys():
    code = code.replace(k, subs1[k])

print(code)

# ============ End step 1 =====================================================================
    
terms = {
    "eo3**4"        : ["eo3**4"        , " 1 / ( 1 - (   (1 - k3)**(4/2)  ))"],
    "eo1**2*eo2**2" : ["eo1**2*eo2**2" , " 1 / ( 1 - (   (1 - k1)**(2/2) * (1 - k2)**(2/2)  ))"],
    "eo1**2*eo3**2" : ["eo1**2*eo3**2" , " 1 / ( 1 - (   (1 - k1)**(2/2) * (1 - k3)**(2/2)  ))"],
    "eo1**2*eo3"    : ["eo1**2*eo3"    , " 1 / ( 1 - (   (1 - k1)**(2/2) * (1 - k3)**(1/2)  ))"],
    "eo1**2"        : ["eo1**2"        , " 1 / ( 1 - (   (1 - k1)**(2/2)  ))"],
    "eo1*eo2*eo3"   : ["eo1*eo2*eo3"   , " 1 / ( 1 - (   (1 - k1)**(1/2) * (1 - k2)**(1/2) * (1 - k3)**(1/2)  ))"],
    "eo1*eo2"       : ["eo1*eo2"       , " 1 / ( 1 - (   (1 - k1)**(1/2) * (1 - k2)**(1/2)  ))"],
    "eo2**2*eo3**2" : ["eo2**2*eo3**2" , " 1 / ( 1 - (   (1 - k2)**(2/2) * (1 - k3)**(2/2)  ))"],
    "eo2**2*eo3"    : ["eo2**2*eo3"    , " 1 / ( 1 - (   (1 - k2)**(2/2) * (1 - k3)**(1/2)  ))"],
    "eo2**2"        : ["eo2**2"        , " 1 / ( 1 - (   (1 - k2)**(2/2)  ))"],
    "eo3**3"        : ["eo3**3"        , " 1 / ( 1 - (   (1 - k3)**(3/2)  ))"],
    "eo3**2"        : ["eo3**2"        , " 1 / ( 1 - (   (1 - k3)**(2/2)  ))"],
}


code = {
    "rNorm**2*m**4*qu2**2" : "eo1**4",
    "(m**4*qu1**2*rNorm**4 + 2*j00*j22*m**2*qu1*qu6*rNorm**2 - 2*j11*j22*m**2*qu1*qu6*rNorm**2 + m**4*qu1**2*rNorm**2 + j00**2*j22**2*qu6**2 - 2*j00*j11*j22**2*qu6**2 + j11**2*j22**2*qu6**2)" : "eo1**2*eo2**2",
    "(2*m**4*qu2**2*rNorm**2 + j00**2*j11**2*qu5**2 - 2*j00*j11**2*j22*qu5**2 + j11**2*j22**2*qu5**2)" : "eo1**2*eo3**2",
    "(4*m**4*qu2**2*rNorm**2*omd + 2*j00**2*j11**2*qu5**2*omd - 4*j00*j11**2*j22*qu5**2*omd + 2*j11**2*j22**2*qu5**2*omd)" : "eo1**2*eo3",
    "(k1**2*m**4*qu3**2*rNorm**4 + 2*j00**2*k1**2*m**2*qu3*qu4*rNorm**2 + k1**2*m**4*qu3**2*rNorm**2 + j00**4*k1**2*qu4**2 + j00**2*j11**2*qu5**2*omd**2 - 2*j00*j11**2*j22*qu5**2*omd**2 + j11**2*j22**2*qu5**2*omd**2)" : "eo1**2",
    "(-2*k1*m**4*qu3**2*rNorm**4 + 2*k3*m**4*qu1**2*rNorm**4 - 2*j00**2*k1*m**2*qu3*qu4*rNorm**2 + 2*j00*j11*k1*m**2*qu3*qu4*rNorm**2 - 2*j00*j22*k1*m**2*qu3*qu4*rNorm**2 + 2*j00*j22*k3*m**2*qu1*qu6*rNorm**2 - 2*j11*j22*k3*m**2*qu1*qu6*rNorm**2 + 2*j22**2*k3*m**2*qu1*qu6*rNorm**2 - 2*k1*m**4*qu3**2*rNorm**2 + 2*k3*m**4*qu1**2*rNorm**2 + 2*j00**3*j11*k1*qu4**2 - 2*j00**3*j22*k1*qu4**2 - 2*j00*j11**3*k2*qu5**2 + 2*j00*j22**3*k3*qu6**2 + 2*j11**3*j22*k2*qu5**2 - 2*j11*j22**3*k3*qu6**2)" : "eo1*eo2*eo3",
    "(-2*k1*m**4*qu3**2*rNorm**4*omd - 2*j00**2*k1*m**2*qu3*qu4*rNorm**2*omd + 2*j00*j11*k1*m**2*qu3*qu4*rNorm**2*omd - 2*j00*j22*k1*m**2*qu3*qu4*rNorm**2*omd - 2*k1*m**4*qu3**2*rNorm**2*omd + 2*j00**3*j11*k1*qu4**2*omd - 2*j00**3*j22*k1*qu4**2*omd - 2*j00*j11**3*k2*qu5**2*omd + 2*j11**3*j22*k2*qu5**2*omd)" : "eo1*eo2",
    "(m**4*qu3**2*rNorm**4 - 2*j00*j11*m**2*qu3*qu4*rNorm**2 + 2*j00*j22*m**2*qu3*qu4*rNorm**2 + m**4*qu3**2*rNorm**2 + j00**2*j11**2*qu4**2 - 2*j00**2*j11*j22*qu4**2 + j00**2*j22**2*qu4**2)" : "eo2**2*eo3**2",
    "(2*m**4*qu3**2*rNorm**4*omd - 4*j00*j11*m**2*qu3*qu4*rNorm**2*omd + 4*j00*j22*m**2*qu3*qu4*rNorm**2*omd + 2*m**4*qu3**2*rNorm**2*omd + 2*j00**2*j11**2*qu4**2*omd - 4*j00**2*j11*j22*qu4**2*omd + 2*j00**2*j22**2*qu4**2*omd)" : "eo2**2*eo3",
    "(m**4*qu3**2*rNorm**4*omd**2 - 2*j00*j11*m**2*qu3*qu4*rNorm**2*omd**2 + 2*j00*j22*m**2*qu3*qu4*rNorm**2*omd**2 + m**4*qu3**2*rNorm**2*omd**2 + j00**2*j11**2*qu4**2*omd**2 - 2*j00**2*j11*j22*qu4**2*omd**2 + j00**2*j22**2*qu4**2*omd**2 + j11**4*k2**2*qu5**2)" : "eo2**2",
    "rNorm**2*m**4*qu2**2" : "eo3**4",
    "4*m**4*qu2**2*rNorm**2*omd" : "eo3**3",
    "(k3**2*m**4*qu1**2*rNorm**4 + 2*j22**2*k3**2*m**2*qu1*qu6*rNorm**2 + k3**2*m**4*qu1**2*rNorm**2 + 4*m**4*qu2**2*rNorm**2*omd**2 + j22**4*k3**2*qu6**2)" : "eo3**2",
}

full = ""

for k in code.keys():
    const_part = k
    error_zero = terms[code[k]][0]
    sum_over_time = terms[code[k]][1].replace(" ", "")

    full += " + ( abs(" + const_part + ") * abs(" + error_zero + "))**0.5 * " + sum_over_time

print("\nFull expression:")
print(full)

print("WARNING: LOOK AT THE CODE IF YOU CHANGED SOMETHING, MAYBE THE RESULT WASNT UPDATED")

